#!/usr/bin/python
#
#
# See also:
# - https://www.kernel.org/doc/Documentation/block/stat.txt
#
# CONSIDER:
# - dedupe devices, e.g. by SN
# - Namne devices (SN? type?)
# - see whether we should be reading /proc/diskstats instead, see:
#   https://www.kernel.org/doc/Documentation/iostats.txt
#
import os
import sys
import time
import glob
import pickle
import pprint

import helpers_osstat




def disk_get_current_state():
    " wrapping around helpers_osstat's disk_interesting_statpaths() and disk_getstats() "
    interesting = helpers_osstat.disk_interesting_statpaths()
    current_state = {}
    for _,_,statpath in interesting:
        #print "  looking at %r"%statpath
        devdict = helpers_osstat.disk_getstats( statpath )
        devname = devdict['devname']
        current_state[ devname ] = devdict
    return current_state


def disk_get_prev_state():
    try:
        path = choose_state_location()
        return pickle.load( open( path, "rb" ) )
    except EOFError:
        return {}


def store_state( oo ):
    path = choose_state_location()
    pickle.dump( oo, open( path, "wb" ) )

    
def choose_state_location( trylocs = ['/run/shm', '/dev/shm', '/tmp'] ): # Try to do this in RAM, fall back to tmp (which is probably a disk)
    retpath = None
    for trydir in trylocs:
        if os.access(trydir, os.W_OK):
            trypath = os.path.join(trydir,'diskstat_state')
            if os.access( trypath, os.W_OK):
                retpath = trypath
                break
            else: # try creating, to be sure
                try:
                    f=open(trypath,'wb')
                    f.close()
                    retpath = trypath
                    break
                except IOError:
                    pass
    return retpath




    


colors=[ # could use 'COLOUR1' .. 'COLOUR28' (or ..20), see http://munin-monitoring.org/wiki/fieldname.colour
    'ffff00','ff00ff','00ffff',
    'ff0000','0000ff','ff0000',

    'ffaaaa','aaffaa','aaaaff',
    'ffffaa','ffaaff','aaffff',
    
    '00ffaa','ffaa00','ff00aa',
    '00aaff','aaff00','aa00ff',
]
givenout = {}
def str_to_color(s):
    ''' give the same string the same color the same run of this script 
      supports the multigraph coloring things consistently.
    '''
    if s not in givenout:
        choosenow = len(givenout)
        givenout[s] = choosenow
        
    return colors[ givenout[s]%len(colors) ]



def main():
   
    if len(sys.argv)>1 and sys.argv[1] == 'debug':
        print 'Fetching state from proc'
        current_state = disk_get_current_state()

        print "Fetching previous state"
        prev_state = disk_get_prev_state()
        
        print 'Calculating averages since last stored state'
        d = helpers_osstat.disk_stats_diff( prev_state, current_state)
        if debugprint and 1:
            pprint.pprint(d)

        
        print 'Storing current state for next-round comparison'       
        store_state( current_state )

    else:
        config = ( len(sys.argv)>1  and  sys.argv[1] == 'config')
        
        current_state = disk_get_current_state()
        prev_state = disk_get_prev_state()
        changes = helpers_osstat.disk_stats_diff( prev_state, current_state)

        if not config: # next phase starts when munin asks for (diff)values (could be done afther the below does not fail)
            store_state( current_state )
            
        # Produce the stuff munin wants to see:
        
        # bandwidth (stacking) ##################################################################
        print 'multigraph avg_throughput'
        if config:
            print "graph_category disk"
            print 'graph_title IO throughput'
            print "graph_vlabel bytes / second"
            #print 'graph_args -l -900000000 -u 900000000'
   
        # CONSIDER: do our own coloring so we can make them consistent between read and write?
        rtotal = 0
        wtotal = 0
        first = True
        for devname in sorted(changes):
            try:
                sername = helpers_osstat.disk_devname_to_prodser(devname)[0].split('-',1)[1]
                safename = sername.encode('hex_codec')
            except:
                sername = devname
                safename = devname.encode('hex_codec')
            if config:
                print "%s_rbyps.label %s read"%(safename, sername )
                print "%s_rbyps.type GAUGE"%(safename)
                print "%s_rbyps.colour %s"%(safename, str_to_color(devname))                
                if first:
                    print "%s_rbyps.draw AREA"%(safename,)
                    first = False
                else:
                    print "%s_rbyps.draw STACK"%(safename,)
            else:
                print "%s_rbyps.value %d"%(safename, changes[devname]['read_bytespersecond'])
                rtotal += changes[devname]['read_bytespersecond']
    
        first = True
        for devname in sorted(changes):
            try:
                sername = helpers_osstat.disk_devname_to_prodser(devname)[0].split('-',1)[1]
                safename = sername.encode('hex_codec')
            except:
                sername = devname
                safename = devname.encode('hex_codec')
            if config:
                print "%s_wbyps.label %s write"%(safename,sername)
                print "%s_wbyps.type GAUGE"%(safename)            
                print "%s_wbyps.colour %s"%(safename, str_to_color(devname))                
                if first:                
                    print "%s_wbyps.draw AREA"%(safename,)
                    first = False
                else:
                    print "%s_wbyps.draw STACK"%(safename,)
            else:
                print "%s_wbyps.value %d"%(safename, -changes[devname]['write_bytespersecond'])
                wtotal += changes[devname]['write_bytespersecond']

        if config:
            print "total_rbyps.label total read"
            print "total_rbyps.type GAUGE"
            print "total_rbyps.draw LINE1"
            print "total_wbyps.label total write"
            print "total_wbyps.type GAUGE"
            print "total_wbyps.draw LINE1"
            print "total_byps.label total read+write"
            print "total_byps.type GAUGE"
            print "total_byps.draw LINE1"
        else:
            print "total_rbyps.value %s"%(rtotal,)
            print "total_wbyps.value %s"%(wtotal,)
            print "total_byps.value %s"%(rtotal+wtotal)
                

        # iops ################################################################################
        print 
        print 'multigraph iops'
        if config:
            print "graph_category disk"
            print 'graph_title IOPS'
            print 'graph_args -l 0 -u 1000 -r'
            print 'graph_vlabel IOs per second'

        total_iops = 0
        for devname in sorted(changes):
            try:
                sername = helpers_osstat.disk_devname_to_prodser(devname)[0].split('-',1)[1]
                safename = sername.encode('hex_codec')
            except:
                sername = devname
                safename = devname.encode('hex_codec')
            if config:
                print "%s_iops.label %s"%(safename, sername)
                print "%s_iops.colour %s"%(safename, str_to_color(devname))                
                print "%s_iops.draw LINE1"%(safename,)
            else:
                print "%s_iops.value %d"%(safename, changes[devname]['iops'])
                total_iops += changes[devname]['iops']
        if config:
            print "total_iops.label total IOPS"
            print "total_iops.type GAUGE"
            print "total_iops.draw LINE1"
        else:
            print "total_iops.value %s"%(total_iops,)
                
        # wait time ###########################################################################
        print
        print 'multigraph avg_wait'
        if config:
            print "graph_category disk"
            print 'graph_title Wait time'
            print "graph_vlabel ms each second"
            print "graph_args -l -1500 -u 1500 -r"
                    
        first = True
        for devname in sorted(changes):
            try:
                sername = helpers_osstat.disk_devname_to_prodser(devname)[0].split('-',1)[1]
                safename = sername.encode('hex_codec')
            except:
                sername = devname
                safename = devname.encode('hex_codec')
            if config:
                print "%s_rwait.label %s read"%(safename,sername)
                print "%s_rwait.type GAUGE"%(safename)
                print "%s_rwait.colour %s"%(safename, str_to_color(devname))                                
                if first:
                    print "%s_rwait.line 1000:cc6666"%(safename,)
                    first = False
                print "%s_rwait.draw LINE1"%(safename,)
            else:
                print "%s_rwait.value %d"%(safename, changes[devname]['readwait_mspersecond'])

        first = True
        for devname in sorted(changes):
            try:
                sername = helpers_osstat.disk_devname_to_prodser(devname)[0].split('-',1)[1]
                safename = sername.encode('hex_codec')
            except: 
                sername = devname
                safename = devname.encode('hex_codec')
                pass
            if config:
                print "%s_wwait.label %s write"%(safename,sername)
                print "%s_wwait.type GAUGE"%(safename)
                print "%s_wwait.colour %s"%(safename, str_to_color(devname))                                
                if first:
                    print "%s_wwait.line -1000:cc6666"%(safename,)
                    first = False
                print "%s_wwait.draw LINE1"%(safename,)
            else:
                print "%s_wwait.value %d"%(safename, -changes[devname]['writewait_mspersecond'])
        
 
        # utilization ########################################################################
        print
        print 'multigraph avg_util'
        if config:
            print "graph_category disk"
            print 'graph_title Utilization'
            print 'graph_args -l 0 -u 100 -r'
            print "graph_vlabel % busy"
            
        for devname in sorted(changes):
            try:
                sername = diskdevname_to_prodser(devname)[0].split('-',1)[1]
                safename = sername.encode('hex_codec')
            except:
                sername = devname
                safename = devname.encode('hex_codec')
            if config:
                print "%s_util.label %s"%(safename, sername)
                print "%s_util.draw LINE1"%(safename,)
                print "%s_util.colour %s"%(safename, str_to_color(devname))                                

            else:
                print "%s_util.value %d"%(safename, changes[devname]['utilization_percent'])


if __name__ == '__main__':
    main()
